[project]
authors = [{ name = "Ashlynn Antrobus", email = "ashlynn@prosepal.io" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Other Audience",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing",
    "Typing :: Typed",
]
dependencies = [
    "ebook2text>=2.1.2",
    "json-repair>=0.46.0",
    "loguru>=0.7.3",
    "pydantic>=2.11.5",
    "python-decouple>=3.8",
    "reportlab>=4.4.1",
]
description = "Create a story bible with AI from a finished manuscript"
keywords = ["AI", "fiction", "manuscript", "story bible", "writing"]
license = { text = "MIT" }
name = "lorebinders"
readme = "README.md"
requires-python = ">= 3.10"
version = "0.3.0"

[project.optional-dependencies]
anthropic = ["anthropic>=0.52.1"]
openai = ["openai>=1.82.0", "tiktoken>=0.9.0"]
supabase = ["supasaas"]

gemini = ["google-genai>=1.16.1"]

[project.urls]
"Homepage" = "https://prosepal.io"
"Issues" = "https://github.com/ashrobertsdragon/LoreBinders/issues"
"Pull Requests" = "https://github.com/ashrobertsdragon/LoreBinders/pulls"
"Source" = "https://github.com/ashrobertsdragon/LoreBinders"

[tool.uv.sources]
supasaas = { git = "https://github.com/ashrobertsdragon/SupaSaaS.git" }

[tool.mypy]
files = ["src/lorebinders/**/*.py"]
ignore_missing_imports = true
python_version = "3.10"

[tool.ruff]
exclude = [
    "*.json",
    "*cache",
    "*cov",
    ".git",
    ".venv",
    ".vscode",
    "__pycache__",
    "test*",
    "work",
]
force-exclude = true
line-length = 80

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = ["A002", "ANN002", "ANN003", "ANN204", "ANN401", "D100", "D417"]
select = ["A", "ANN", "D", "DOC", "E", "F", "I", "N", "UP"]

[tool.ruff.lint.isort]
#:reorderArrays false
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["--cov=lorebinders"]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
omit = [
    "*/_types.py",
    "lorebinders/_exceptions.py",
    "lorebinders/_type_annotations.py",
]

[tool.coverage.report]
exclude_also = [
    "@(abc\\.)?abstractmethod",
    "__all__",
    "class .*\\bProtocol\\):",
    "def __repr__",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
]

[dependency-groups]
dev = ["pre-commit>=4.2.0", { include-group = "testing" }]
lint = ["mypy>=1.15.0", "ruff>=0.11.11"]
testing = [
    "pypdf>=5.5.0",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
    "pytest>=8.3.3",
]
