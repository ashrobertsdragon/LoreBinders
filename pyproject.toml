[project]
name = "lorebinders"
version = "0.3.0"
description = "Create a story bible with AI from a finished manuscript"
readme = "README.md"
authors = [{name = "Ashlynn Antrobus", email = "ashlynn@prosepal.io"}]
license = {text = "MIT"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Other Audience",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing",
    "Typing :: Typed",
]
keywords = ["writing", "fiction", "AI", "manuscript", "story bible"]
requires-python = ">= 3.10"
dependencies = [
    "ebook2text>=2.1.2",
    "loguru>=0.7.3",
    "pydantic>=2.11.5",
    "python-decouple>=3.8",
    "reportlab>=4.4.1",
]

[project.optional-dependencies]
openai = [
    "openai>=1.82.0",
    "tiktoken>=0.9.0",
]
supabase = [
    "supasaas",
]
anthropic = [
    "anthropic>=0.52.1",
]

gemini = [
    "google-genai>=1.16.1",
]

[project.urls]
"Homepage" = "https://prosepal.io"
"Source" = "https://github.com/ashrobertsdragon/LoreBinders"
"Issues" = "https://github.com/ashrobertsdragon/LoreBinders/issues"
"Pull Requests" = "https://github.com/ashrobertsdragon/LoreBinders/pulls"

[tool.uv.sources]
supasaas = { git = "https://github.com/ashrobertsdragon/SupaSaaS.git" }

[tool.mypy]
ignore_missing_imports = true
python_version = "3.10"
files = ["src/lorebinders/**/*.py"]

[tool.ruff]
line-length = 80
force-exclude = true
exclude = [".git", "__pycache__", ".venv", ".vscode", "test*", "*cov", "*cache", "work", "*.json"]

[tool.ruff.format]
line-ending = "lf"
docstring-code-format = true

[tool.ruff.lint]
ignore = ["A002", "ANN204", "ANN401", "D100", "D417"]
select = ["A", "ANN", "D", "DOC", "E", "F", "I", "N", "UP"]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "local-folder", "first-party"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = ["-v --cov=lorebinders --cov-fail-under=80"]
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage.run]
omit = ["*/_types.py"]

[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    ]

[dependency-groups]
testing = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-xdist>=3.6.1",
]
lint = [
    "mypy>=1.15.0",
    "ruff>=0.11.11",
]
dev = [
    "pre-commit>=4.2.0",
    {include-group = "testing"},
]
